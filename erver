[33mcommit 1e86fbd1eca6b5ed755e3b7f75b53095d4edfdc7[m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mmaster[m[33m)[m
Author: Stilian Mihnev <stilianmh@abv.bg>
Date:   Wed Apr 16 22:50:49 2025 +0300

    feat(chat): mark messages as read when chat is opened

[1mdiff --git a/server/controllers/chatController.ts b/server/controllers/chatController.ts[m
[1mindex 992aa11..8bea4b1 100644[m
[1m--- a/server/controllers/chatController.ts[m
[1m+++ b/server/controllers/chatController.ts[m
[36m@@ -22,7 +22,7 @@[m [mexport const getUserChats = async (req: AuthenticatedRequest, res: Response) =>[m
         const unreadCount = await Message.countDocuments({[m
           chat: chat._id,[m
           sender: { $ne: req.user._id },[m
[31m-          read: false[m
[32m+[m[32m          readBy: { $ne: req.user._id }[m
         });[m
         return {[m
           ...chat.toObject(),[m
[36m@@ -69,9 +69,9 @@[m [mexport const getChat = async (req: AuthenticatedRequest, res: Response) => {[m
       {[m
         chat: chat._id,[m
         sender: { $ne: req.user._id },[m
[31m-        read: false[m
[32m+[m[32m        readBy: { $ne: req.user._id }[m
       },[m
[31m-      { read: true }[m
[32m+[m[32m      { $addToSet: { readBy: req.user._id } }[m
     );[m
 [m
     res.json(chat);[m
[36m@@ -112,8 +112,8 @@[m [mexport const getUnreadCounts = async (req: AuthenticatedRequest, res: Response)[m
           [m
           const count = await Message.countDocuments({[m
             chat: chat._id,[m
[31m-            sender: { $ne: req.user._id }, // Use _id instead of uid[m
[31m-            read: false[m
[32m+[m[32m            sender: { $ne: req.user._id },[m
[32m+[m[32m            readBy: { $ne: req.user._id }[m
           });[m
           [m
           console.log('Unread count for chat:', {[m
[36m@@ -221,21 +221,37 @@[m [mexport const sendMessage = async (req: AuthenticatedRequest, res: Response) => {[m
 };[m
 [m
 // Mark messages as read[m
[31m-export const markAsRead = async (req: AuthenticatedRequest, res: Response) => {[m
[32m+[m[32mexport const markMessagesAsRead = async (req: AuthenticatedRequest, res: Response) => {[m
   try {[m
     const { chatId } = req.params;[m
[32m+[m[32m    const userId = req.user._id;[m
 [m
[31m-    await Message.updateMany([m
[31m-      {[m
[31m-        chat: chatId,[m
[31m-        sender: { $ne: req.user._id },[m
[31m-        read: false[m
[31m-      },[m
[31m-      { read: true }[m
[32m+[m[32m    // Find all unread messages in the chat[m
[32m+[m[32m    const unreadMessages = await Message.find({[m
[32m+[m[32m      chat: chatId,[m
[32m+[m[32m      readBy: { $ne: userId }[m
[32m+[m[32m    });[m
[32m+[m
[32m+[m[32m    // Mark each message as read by the user[m
[32m+[m[32m    const updatePromises = unreadMessages.map(message =>[m[41m [m
[32m+[m[32m      Message.findByIdAndUpdate([m
[32m+[m[32m        message._id,[m
[32m+[m[32m        { $addToSet: { readBy: userId } },[m
[32m+[m[32m        { new: true }[m
[32m+[m[32m      )[m
     );[m
 [m
[31m-    res.json({ message: 'Messages marked as read' });[m
[32m+[m[32m    await Promise.all(updatePromises);[m
[32m+[m
[32m+[m[32m    // Get updated unread count[m
[32m+[m[32m    const unreadCount = await Message.countDocuments({[m
[32m+[m[32m      chat: chatId,[m
[32m+[m[32m      readBy: { $ne: userId }[m
[32m+[m[32m    });[m
[32m+[m
[32m+[m[32m    res.json({ success: true, unreadCount });[m
   } catch (error) {[m
[31m-    res.status(500).json({ message: (error as Error).message });[m
[32m+[m[32m    console.error('Error marking messages as read:', error);[m
[32m+[m[32m    res.status(500).json({ message: 'Failed to mark messages as read' });[m
   }[m
 }; [m
\ No newline at end of file[m
[1mdiff --git a/server/index.ts b/server/index.ts[m
[1mindex 6969e75..524d0e6 100644[m
[1m--- a/server/index.ts[m
[1m+++ b/server/index.ts[m
[36m@@ -21,12 +21,17 @@[m [mconst CLIENT_URL = process.env.CLIENT_URL || 'http://localhost:5173';[m
 [m
 // Enable CORS with specific options[m
 app.use(cors({[m
[31m-  origin: '*', // Allow all origins during development[m
[32m+[m[32m  origin: ['http://localhost:5173', 'http://localhost:3000', 'http://localhost:3001'],[m
   credentials: true,[m
   methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],[m
[31m-  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'][m
[32m+[m[32m  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With', 'Cache-Control', 'Pragma'],[m
[32m+[m[32m  preflightContinue: false,[m
[32m+[m[32m  optionsSuccessStatus: 204[m
 }));[m
 [m
[32m+[m[32m// Handle preflight requests[m
[32m+[m[32mapp.options('*', cors());[m
[32m+[m
 // Parse JSON bodies[m
 app.use(express.json());[m
 app.use(express.urlencoded({ extended: true }));[m
[36m@@ -37,10 +42,10 @@[m [mconst httpServer = createServer(app);[m
 // Socket.IO configuration[m
 const io = new Server(httpServer, {[m
   cors: {[m
[31m-    origin: '*', // Allow all origins during development[m
[31m-    methods: ['GET', 'POST'],[m
[32m+[m[32m    origin: ['http://localhost:5173', 'http://localhost:3000', 'http://localhost:3001'],[m
[32m+[m[32m    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],[m
     credentials: true,[m
[31m-    allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'][m
[32m+[m[32m    allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With', 'Cache-Control', 'Pragma'][m
   },[m
   transports: ['websocket', 'polling'],[m
   allowEIO3: true,[m
[1mdiff --git a/server/models/Message.ts b/server/models/Message.ts[m
[1mindex 4477954..d742958 100644[m
[1m--- a/server/models/Message.ts[m
[1m+++ b/server/models/Message.ts[m
[36m@@ -5,7 +5,7 @@[m [mexport interface IMessage extends Document {[m
   sender: string; // Firebase UID[m
   text: string;[m
   createdAt: Date;[m
[31m-  read: boolean;[m
[32m+[m[32m  readBy: string[]; // Array of user IDs who have read the message[m
 }[m
 [m
 const messageSchema = new Schema<IMessage>({[m
[36m@@ -27,15 +27,16 @@[m [mconst messageSchema = new Schema<IMessage>({[m
     type: Date,[m
     default: Date.now[m
   },[m
[31m-  read: {[m
[31m-    type: Boolean,[m
[31m-    default: false[m
[31m-  }[m
[32m+[m[32m  readBy: [{[m
[32m+[m[32m    type: String,[m
[32m+[m[32m    default: [][m
[32m+[m[32m  }][m
 });[m
 [m
 // Add indexes for better query performance[m
 messageSchema.index({ chat: 1, createdAt: -1 });[m
 messageSchema.index({ sender: 1 });[m
[32m+[m[32mmessageSchema.index({ readBy: 1 });[m
 [m
 // Ensure dates are always returned as ISO strings[m
 messageSchema.set('toJSON', {[m
[1mdiff --git a/server/routes/chatRoutes.ts b/server/routes/chatRoutes.ts[m
[1mindex 409d812..888cc62 100644[m
[1m--- a/server/routes/chatRoutes.ts[m
[1m+++ b/server/routes/chatRoutes.ts[m
[36m@@ -1,5 +1,5 @@[m
 import express, { Request, Response, NextFunction, RequestHandler } from 'express';[m
[31m-import { getUserChats, getChat, createChat, sendMessage, markAsRead, getUnreadCounts } from '../controllers/chatController';[m
[32m+[m[32mimport { getUserChats, getChat, createChat, sendMessage, getUnreadCounts, markMessagesAsRead } from '../controllers/chatController';[m
 import auth from '../middleware/auth';[m
 import { AuthenticatedRequest } from '../types/auth';[m
 [m
[36m@@ -61,11 +61,11 @@[m [mrouter.post('/:chatId/messages', (async (req: AuthenticatedRequest, res: Respons[m
   }[m
 }) as unknown as RequestHandler);[m
 [m
[31m-// Mark messages as read[m
[32m+[m[32m// Mark messages as read in a chat[m
 router.put('/:chatId/read', (async (req: AuthenticatedRequest, res: Response, next: NextFunction) => {[m
   try {[m
[31m-    const messages = await markAsRead(req, res);[m
[31m-    res.json(messages);[m
[32m+[m[32m    const result = await markMessagesAsRead(req, res);[m
[32m+[m[32m    res.json(result);[m
   } catch (error) {[m
     console.error('Err